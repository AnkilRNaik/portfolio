{"version":3,"sources":["images/ankil.jpeg","components/home.js","components/aboutMe.js","components/experience.js","components/education.js","components/header.js","components/contact.js","App.js","serviceWorker.js","index.js"],"names":["Home","src","profileImage","AboutMe","aboutMeText","Experience","experience","map","item","i","company","title","dates","duties","split","duty","Education","education","university","degree","major","dateGraduated","Header","className","to","Contact","contact","email","phone","href","linkedin","github","twitter","App","exact","path","element","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+9HAAe,MAA0B,mC,OCa1BA,MAVf,WAEE,OACE,gCACE,qBAAKC,IAAKC,IACV,4BAJY,wC,QCOHC,MARf,WACE,OACE,8BACE,4BAAIC,S,QCcKC,MAjBf,WACE,OACE,oCACEC,IAAWC,KAAI,SAACC,EAAMC,GAAP,OACb,gCACE,6BAAKD,EAAKE,UACV,+BAAKF,EAAKG,MAAV,KAAmBH,EAAKI,SACxB,6BACGJ,EAAKK,OAASL,EAAKK,OAAOC,MAAM,KAAKP,KAAI,SAAAQ,GAAI,OAAI,mCAAMA,EAAN,UAAqB,OAJjEN,U,QCWHO,MAff,WAEE,OACE,oCACEC,IAAUV,KAAI,SAACC,EAAMC,GAAP,OACZ,gCACE,6BAAKD,EAAKU,aACV,+BAAKV,EAAKW,OAAV,IANgB,KAMhB,IAAuCX,EAAKY,MAA5C,MAAsDZ,EAAKa,mBAFnDZ,U,MCOHa,MAZf,WACI,OACI,sBAAKC,UAAU,SAAf,UACI,cAAC,IAAD,CAAMC,GAAG,QAAQD,UAAU,OAA3B,SAAkC,oBAAIA,UAAU,OAAd,oBAClC,cAAC,IAAD,CAAMC,GAAG,YAAYD,UAAU,OAA/B,SAAsC,oBAAIA,UAAU,OAAd,wBACtC,cAAC,IAAD,CAAMC,GAAG,cAAcD,UAAU,OAAjC,SAAwC,oBAAIA,UAAU,OAAd,0BACxC,cAAC,IAAD,CAAMC,GAAG,aAAaD,UAAU,OAAhC,SAAuC,oBAAIA,UAAU,OAAd,yBACvC,cAAC,IAAD,CAAMC,GAAG,WAAWD,UAAU,OAA9B,SAAqC,oBAAIA,UAAU,OAAd,2B,OCKlCE,MAZf,WACE,OACE,gCACE,4BAAIC,IAAQC,QACZ,4BAAID,IAAQE,QACZ,4BAAG,mBAAGC,KAAMH,IAAQI,SAAjB,wBACH,4BAAG,mBAAGD,KAAMH,IAAQK,OAAjB,sBACH,4BAAG,mBAAGF,KAAMH,IAAQM,QAAjB,2BCcMC,EAfH,WACV,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,YAAYC,QAAS,cAAC,EAAD,MACvC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,cAAcC,QAAS,cAAC,EAAD,MACzC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,aAAaC,QAAS,cAAC,EAAD,MACxC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,WAAWC,QAAS,cAAC,EAAD,aCN1BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a195b59.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ankil.566bade5.jpeg\";","import React from 'react';\nimport profileImage from '../images/ankil.jpeg';\n\nfunction Home() {\n  const message = \"Hello! My name is...Ankil Naik.\";\n  return (\n    <div>\n      <img src={profileImage}></img>\n      <p>{message}</p>\n    </div>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport { aboutMeText } from '../content/aboutMe.json';\n\nfunction AboutMe() {\n  return (\n    <div>\n      <p>{aboutMeText}</p>\n    </div>\n  );\n}\n\nexport default AboutMe;","import React from 'react';\nimport { experience } from '../content/experience.json';\n\nfunction Experience() {\n  return (\n    <div> {\n      experience.map((item, i) => (\n        <div key={i}>\n          <h2>{item.company}</h2>\n          <h4>{item.title}: {item.dates}</h4>\n          <ul>\n            {item.duties ? item.duties.split(\"/\").map(duty => <li> {duty} </li>) : \"\"}\n          </ul>\n        </div>\n      ))\n    }\n    </div>\n  );\n}\n\nexport default Experience;","import React from 'react';\nimport { education } from '../content/education.json';\n\nfunction Education() {\n  let joinDegreeToMajor = \"in\";\n  return (\n    <div> {\n      education.map((item, i) => (\n        <div key={i}>\n          <h2>{item.university}</h2>\n          <h4>{item.degree} {joinDegreeToMajor} {item.major} - {item.dateGraduated}</h4>\n        </div>\n      ))\n    }\n    </div>\n  );\n}\n\nexport default Education;","import { Link } from 'react-router-dom';\nimport '../styles/header.css';\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <Link to=\"/home\" className=\"href\"><h1 className=\"pane\">HOME</h1></Link>\n            <Link to=\"/about-me\" className=\"href\"><h1 className=\"pane\">ABOUT ME</h1></Link>\n            <Link to=\"/experience\" className=\"href\"><h1 className=\"pane\">EXPERIENCE</h1></Link>\n            <Link to=\"/education\" className=\"href\"><h1 className=\"pane\">EDUCATION</h1></Link>\n            <Link to=\"/contact\" className=\"href\"><h1 className=\"pane\">CONTACT</h1></Link>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport { contact } from '../content/contact.json';\n\nfunction Contact() {\n  return (\n    <div>\n      <p>{contact.email}</p>\n      <p>{contact.phone}</p>\n      <p><a href={contact.linkedin}>LinkedIn</a></p>\n      <p><a href={contact.github}>GitHub</a></p>\n      <p><a href={contact.twitter}>Twitter</a></p>\n    </div>\n  );\n}\n\nexport default Contact;","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Home from '../src/components/home.js';\nimport AboutMe from './components/aboutMe.js';\nimport Experience from './components/experience.js';\nimport Education from './components/education';\nimport Header from './components/header.js';\nimport Contact from './components/contact.js';\n\nconst App = () => {\n  return (\n    <Router>\n      <Header />\n      <Routes>\n        <Route exact path=\"*\" element={<Home />} />\n        <Route exact path=\"/about-me\" element={<AboutMe />} />\n        <Route exact path=\"/experience\" element={<Experience />} />\n        <Route exact path=\"/education\" element={<Education />} />\n        <Route exact path=\"/contact\" element={<Contact />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}